{
  "openapi": "3.0.3",
    "info": {
    "title": "WebMLOpenEO-API",
    "x-summary": "An API for web- and maschine learnig-based Landuse and Landcover-classification",
    "description": "This API is a customised endpoint of an openEO-conform R-backend, which performs land use and land cover classifications based on machine learning algorithms. It is implemented for a specific user-friendly front-end but can be used freely without it.\n\nThis API was implemented in a project-group formed by [Michael Brüggemann](https://github.com/MichaelBrueggemann), [Tim Ciroth](https://github.com/TimCi), [Martin Kriger](https://github.com/martinkrg26) and [Leo Wittrock](https://github.com/wittrockscode) within the course 'Geosoftware II' at the Institut of Geoinformatik der Universität Münster. The project was released on '2024-01-30'.\n\nFor more information lookup our [Git-repository](https://github.com/wittrockscode/WebMLOpenEO)",
    "x-release_date":"2024-01-30",
    "version": "1.0.0",
    "contact": {
      "name": "Tim Ciroth",
      "url": "https://github.com/TimCi",
      "email": "timciroth@uni-muenster.de"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/api": {
      "get": {
        "summary": "Get the OpenAPI-Document as Documentation of the API",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/openeocubes": {
      "get": {
        "summary": "Get the openeo-gdalcubes-R-backend landing page of its STAC-API",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/classify": {
      "post": {
        "summary": "Train model and classify map",
        "description": "Takes parameter in JSON-file, trains model on R-Backend and response with a JSON-File which contains the model itself and the classification results",
        "requestBody": {
          "description": "JSON-file for training and classification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful classification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassifyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid requestBody",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/demoClassify": {
      "post": {
        "summary": "Train model and classify map with specific demo-parameters for quick results",
        "description": "Takes parameter in JSON-file, trains model on R-Backend and response with a JSON-File which contains the model itself and the classification results",
        "requestBody": {
          "description": "JSON-file for training and classification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful classification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassifyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid requestBody",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/getDemodata": {
      "get": {
        "summary": "Get an example Json-Request for classify-Endpoint",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassifyRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/getModel": {
      "get": {
        "summary": "Get the calculated model to an uuid as .rds-file",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "UUID of model to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/rds": {
                
              }
            }
          },
          "404": {
            "description": "Id not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/getSentinelImg": {
      "post": {
        "summary": "Get a sentinel RGB-image for specific time and area",
        "description": "Takes parameter in JSON-file, ask STAC-API on openEO-conform R-Backend and response with a TIFF which contains the sentinel-data",
        "requestBody": {
          "description": "JSON-file with time and area of interest",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sentinelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful classification",
            "content": {
              "image/tiff": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "422": {
            "description": "Invalid requestBody",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ClassifyRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of ML-model",
            "enum": [
              "RandomForest"
            ]
          },
          "TOI": {
            "$ref": "#/components/schemas/TOI",
            "description": "Time of interest (for classification)"
          },
          "AOI": {
            "$ref": "#/components/schemas/AOI",
            "description": "Area of interest (for classification)"
          },
          "tot": {
            "$ref": "#/components/schemas/TOI",
            "description": "Time of training"
          },
          "Training_Data": {
            "$ref": "#/components/schemas/Training_Data"
          },
          "Hyperparameter": {
            "$ref": "#/components/schemas/Hyperparameter"
          },
          "Resolution": {
            "type": "number",
            "description": "Resolution of classification-result"
          }
        },
        "required": ["model", "TOI", "AOI", "tot", "Training_Data", "Resolution"]
      },
      "ClassifyResponse": {
        "type": "object",
        "properties": {
          "model_id": {
            "type": "string",
            "description": "ID of trained model"
          },
          "classification": {
            "type": "string",
            "description": "A binary String which contains the classification_result as GTiff"
          },
          "class_map": {
            "type": "object",
            "description": "Map which can be used for decoding classnumbers back to classnames"
          }
        },
        "required": ["model_id", "classification", "class_map"]
      },
      "sentinelRequest": {
        "type": "object",
        "properties": {
          "TOI": {
            "$ref": "#/components/schemas/TOI",
            "description": "Time of interest (for sentinel-IMG)"
          },
          "AOI": {
            "$ref": "#/components/schemas/AOI",
            "description": "Area of interest (for sentinel-IMG)"
          }
        },
        "required": ["TOI", "AOI"]
      },
      "TOI": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          }
        },
        "required": ["start_date", "end_date"]
      },
      "AOI": {
        "type": "object",
        "properties": {
          "geometry": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Polygon"
                ]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "required": ["type", "coordinates"]
          }
        },
        "required": ["geometry"]
      },
      "Training_Data": {
        "type": "object",
        "description": "Data for training wrapped in a FeatureCollection",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["FeatureCollection"]
          },
          "bbox": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          },
          "crs": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["name"],
                "description": "Type of CRS"
              },
              "properties": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "CRS Name"
                  }
                },
                "required": ["name"]
              }
            },
            "required": ["type", "properties"]
          },
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["Feature"]
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "class": {
                      "type": "string"
                    }
                  },
                  "required": ["class"]
                },
                "geometry": {
                  "type": "object",
                  "properties": {
                    "coordinates": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": ["Polygon"]
                    }
                  },
                  "required": ["coordinates", "type"]
                }
              },
              "required": ["type", "properties", "geometry"]
            }
          }
        },
      "required": ["type", "features", "crs"]
      },
      "Hyperparameter": {
        "type": "array",
        "description": "Hyperparameter of ML-Model",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the hyperparameter"
            },
            "value": {
              "type": "string",
              "description": "The value of the hyperparameter"
            }
          },
          "required": ["name", "value"]
        }
      }
    }
  }
}
      